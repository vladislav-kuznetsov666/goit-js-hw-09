{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAiBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAzBPQ,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAMC,iBAEN,IAAMC,EAAaC,SAASC,KAAKC,SAAShB,MAAMiB,OAC1CC,EAAOJ,SAASC,KAAKC,SAASE,KAAKD,OACnCE,EAASL,SAASC,KAAKC,SAASG,OAAOF,OAEzCG,MAAMP,IAAeO,MAAMF,IAASE,MAAMD,GAC5CE,EAAAzB,GAAS0B,OAAOC,QAAQ,iDAqB5B,SAA0BJ,EAAQN,EAAYK,GAC5C,IAAK,IAAIM,EAAI,EAAGA,GAAKL,EAAQK,IAAK,CAGhC1B,EAAc0B,EAFOX,GAAcW,EAAI,GAAKN,GAGzCO,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBqB,EAAAzB,GAAS0B,OAAOK,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEvE6B,OAAM,SAAAH,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBqB,EAAAzB,GAAS0B,OAAOC,QAAQ,sBAAqCK,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,KA1BzE8B,CAAiBX,EAAQN,EAAYK,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\ndocument.querySelector('.form').addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const firstDelay = parseInt(this.elements.delay.value);\n  const step = parseInt(this.elements.step.value);\n  const amount = parseInt(this.elements.amount.value);\n\n  if (isNaN(firstDelay) || isNaN(step) || isNaN(amount)) {\n    Notiflix.Notify.failure('Please fill in all fields with valid numbers.');\n    return;\n  }\n\n  generatePromises(amount, firstDelay, step);\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction generatePromises(amount, firstDelay, step) {\n  for (let i = 1; i <= amount; i++) {\n    const currentDelay = firstDelay + (i - 1) * step;\n\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","firstDelay","parseInt","this","elements","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch","$ce04d3a99e08e73b$var$generatePromises"],"version":3,"file":"03-promises.1584228c.js.map"}